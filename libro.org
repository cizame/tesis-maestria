
#+title: Introducción 
#+author:
#+date: 

#+latex_class: mitesis

#+latex_header: \usepackage{xcolor}
#+latex_header: \usepackage[spanish,mexico]{babel}

#+language: es

#+options: H:4 ':t

* Introducción

A continuación se expondrán las definiciones elementales necesarias para
plantear el problema a tratar.

Una gráfica $G$ es un par ordenado de conjuntos $(V(G),E(G))$, los
elementos del primer conjunto se llaman \emph{vértices} y los del
segundo se llaman \emph{aristas}, con la condición de que las aristas
son parejas no ordenadas de vértices. Dos vértices $v,w$ se dicen
\emph{adyacentes} si $\{v,w\}\in E(G)$.

Una arista $e$ se dice \emph{incidente} con un vértice $v$ si
$v\in e$.  El \emph{grado} $\gr v$ de un vértice $v$ es la cantidad de
aristas incidentes con $v$. Una gráfica $G$ es \emph{regular} si todos
los vértices tienen el mismo grado. Si $G$ es una gráfica regular
donde los vértices tienen grado $k$, decimos que $G$ es
$k$-regular. Una gráfica 3-regular se llama \emph{cúbica}.

Un \emph{ciclo} de \emph{longitud} $n$ es una sucesión de aristas
$e_{1},e_{2},\ldots,e_{n}$, todas distintas, tales que $e_{i}$ es
adyacente a $e_{i+1}$ para $i=1,\ldots,n-1$ y $e_{1}$ adyacente a
$e_{n}$. Si una gráfica tiene ciclos, el \emph{cuello} de $G$ es la
menor longitud de un ciclo en $G$.

Si una gráfica es $k$-regular y tiene cuello $g$, decimos que es una
$(k,g)$-gráfica. Se demuestra en cite:erdos: que para cada $k\geq2$ y
$g\geq3$ existe una $(k,g)$-gráfica. Dados valores específicos de $k$
y $g$, una \emph{$(k,g)$-jaula} es una gráfica $G$ tal que cualquier
otra $(k,g)$-gráfica tiene al menos tantos vértices como $G$.

A partir de la demostración de que toda $(k,g)$-gráfica existe,
surgieron dos problemas: dados los parámetros $k$ y $g$, uno
clasificar todas las $(k,g)$-jaulas salvo isomorfismo, y dos
determinar la cantidad de vértices que estas tienen.

Uno de los casos más estudiados es cuando $k=3$ y en este caso ya se
conocen y se han clasificado las jaulas hasta cuello $12$; sin
embargo si $g\geq 13$ solo se tienen cotas superiores e inferiores
para el número de vértices que estas tienen.

En la tesis de licenciatura cite:tesis: se estudió el problemas de
las jaulas cúbicas de cuello par mayor o igual a ocho, presentando un
método computacional; el cual dibuja gráficas $3$-regulares de cuello
par, a partir de un listado de grupos; e identifica si alguna iguala o
reduce la cota superior.

El método que se siguió tiene dos niveles. El primero, construye
gráficas de Cayley localmente $3K_2$, las cuales son regulares de
grado seis, con la propiedad de que para todo vértice $x$ de la
gráfica, si $A$ denota el conjunto formado por sus vértices
adyacentes, entonces para todo $a\in A$ existe un único $b \in
A\backslash \{a\}$ tal que $a$ y $b$ son adyacentes, la definición
formal se encuentra en cite:tesis:.

El segundo nivel, dibuja la bipartita clánica, asociada a cada una de
las gráficas de Cayley localmente $3K_2$, construidas en el paso
anterior. En dicha gráfica, por cada vértice y por cada triángulo de
la gráfica original; existe un vértice asociado a él: en donde los
vértices $x$ y $y$ son adyacentes si y solo si $x$ es un vértice de la
gráfica de Cayley y $y$ un triángulo que contenga a $x$ o viceversa.

Siguiendo el procedimiento descrito y ayudados con GAP, un software
computacional de Álgebra discreta, se reprodujeron relativamente rápido
las jaulas de Cayley cúbicas de cuello ocho, diez, doce, catorce y
dieciséis, las cuales durante algunos años proporcionaron cotas
superiores para las jaulas cúbicas respectivas. Sin embargo para
localizar una gráfica cúbica de cuello dieciocho por este mismo método
el algoritmo tardó más de lo esperado.

El objetivo de esta nueva tesis es analizar el algoritmo y presentar
mejoras de este, que acorten el tiempo de ejecución del mismo con la
finalidad de utilizarlo en la búsqueda de gráficas cúbicas con cuellos
mayores.


* Preliminares
  
  Cuando al principio de una conversación escuchamos la frase "El
  estudio de los algoritmos", muchos de nosotros podríamos suponer que
  el tema centrar de la charla estará relacionado a una computadora;
  sin embargo, pese a lo que podríamos suponer, para plantear y
  estudiar algoritmos no requerimos de ningún aparato, de hecho su
  existencia es anterior a estos.

** Algoritmos

   La palabra algoritmo tiene su origen en el libro "*Algoritmi de
   numero Indorum*" de la traducción al latín del libro "Hisab al-yabr
   wa'l muqabala" del matemático, astrónomo y geógrafo persa-musulman
   *Abu Abdallah Muhammad ibn Musa al-Jwarizmi* mejor conocido como
   al-Khwarizmi.

   En dicho libro, el matemático enlista una serie de
   pasos a seguir para resolver una ecuación de segundo grado, que por
   supuesto siempre genera la solución correcta. Esta serie de
   pasos se puede considerar como uno de los primeros algoritmos de la
   historia. 

   Un *algoritmo* es una serie de pasos finitos, predeterminados y bien
   definidos a seguir de forma ordenada que permitan, mediante una
   serie de datos de inicio, obtener uno o mas datos de salida los
   cuales se interpretan como solución a un problema determinado.

   
   - *Partes de un algoritmo:*  

     - Entrada: :: Son los datos, proporcionados por el problema
          planteado, que requiere el siguiente paso para su
          funcionamiento, también conocida como condición inicial.
     - Proceso: :: Este es el momento en el que se toman los datos de
          entrada y se manipulan de acuerdo a los pasos
          preestablecidos para procesarlos.
     - Salida: :: Resultado final arrojado por el proceso. 

  - *Ejemplo*: algoritmo para lavarse las manos.  
    
     - *Entrada:*  Agua, Jabón y Manos.
     - *Proceso:* 
       - Moja ambas manos
       - Pon jabón en una mano
       - Frota ambas manos 
       - Enjuaga las manos hasta que no tengan jabón
     - *Salida:*  Manos limpias y sin jabón

  Algo que podría parecer obvio pero que aún no se ha mencionado es
  que sin importar el número de veces que se repita un algoritmo, si
  se tienen los mismos valores en las entradas, entonces éste siempre
  debe de arrojar el mismo resultado.
   
** Características de un buen algoritmo 

 *Características de un buen algoritmo:*

    - Debe estar descrito en términos claros, de modo que pueda convertirse
      en ordenes para una máquina.
    - Debe tener una condición inicial.
    - Debe finalizar después de una cantidad finita de pasos.
    - Debe finalizar con la respuesta correcta.
    - Debe optimizar el tiempo de ejecución.

..... Aqui supongo que debo describir a que me refiero con una
maquina....

** La notación O

Para clasificar un algoritmo como bueno, una de las caracteristicas
que hay que tomar en cuenta es si es rapido o no, pero como dicen,
¿Qué tan rapido es rapido?

Para medir la rapidez de un algoritmo se da una función $g(x)$ como cota
superior para la cantidad de pasos que este realiza antes de dar el
resultado final, cuando el argumento tiende a infinito. Para referirse
a esta función se utiliza la notación $O(g(x))$.

Esta función \(g(n)\) puede ser cota no solo para uno, sino
para varios algoritmos que pueden o no realizar la misma tarea, por lo
que \(O(g(n))\) es en realidad un conjunto de funciones.

*** Definición

**** TODO Notación O

     Decimos que \(f(n)=O(g(n))\) si existen \(M,n_{0}\) tales que
     \(|f(n)|\leq Mg(n)\) para \(n\geq n_{0}\).

     Aun que \(O(g(n))\) es un conjunto de funciones, no es común
     escribir \(f(n)\in O(g(n))\) sino \(f(n)=O(g(n))\).
     .... pongo igual ????....

**** Ejemplo 1

     Sea \(P(n)=a_{0}+a_{1}n+\cdots+a_{m}n^{m}\) un polinomio de grado
     cuando mucho \(m\). Entonces \(P(n)=O(n^{m})\). Pues:
     \begin{align*}
     |P(n)| & \leq |a_0|+|a_1|n+\cdots+|a_m|n^m \\
            & = \left(\frac{|a_0|}{n^m}+\frac{|a_1|}{n^{m-1}}+\cdots+\frac{|a_{m-1}|}{n}+|a_m|\right)n^m\\
	    & \leq (|a_0|+|a_1|+\cdots+|a_m|)n^m,
     \end{align*}
     y entonces si \(n_{0}=1\) y \(M=|a_0|+|a_1|+\cdots+|a_m|\), se
     tiene que \(|P(n)|\leq Mn^{m}\) para \(n\geq n_{0}\).

**** Ejemplo 2
     
     Tiempo de ejecución del algoritmo para encontral el número de
     mayor de una lista

     Demostración de porque es optimo

*** Propiedades

**** 
     Tenemos que:

     - Si \(f(n)\in O(g(n))\) entonces \( O(f(n)) \subseteq O(g(n)) \).
     - Para toda \(f(n)\) se tiene que \(f(n)\in O(f(n))\). 
     - \(O(f(n)=O(g(n)))\) si y solo si \(f(n)\in O(g(n))\) y \(g(n)\in O(f(n))\). 
     - Si \(f(n)=O(g(n))\) y \(h(n)=O(g(n))\), entonces \(f(n)+h(n)= O(g(n))\).
     - Si \(f(n)=O(g(n))\) y \(h(n)\geq 0\), entonces \(f(n)h(n)=O(h(n)g(n))\).
     - Si \(f(n)\in O(g(n))\) y \(g(n)\in O(h(n))\) entonces \(f(n)\in
       O(h(n))\).
     - Si \(f(n)\in O(g(n))\) y \(f(n)\in O(h(n))\) entonces \(f(n)\in
       O(min(g(n),h(n)))\).
     - Si \(f_{1}(n)\in O(g_{1}(n))\) y \(f_{2}(n)\in O(g_{2}(n))\)
       entonces \(f_{2}(n)+f_{2}(n)\in O(max(g_{1}(n),g_{2}(n))\).
     - Si \(f_{1}(n)\in O(g_{1}(n))\) y \(f_{2}(n)\in O(g_{2}(n))\)
       entonces \((f_{2}(n))(f_{2}(n))\in O((g_{1}(n))(g_{2}(n))\).
       
* Algoritmos y su implementación
  
   Como se menciona en [[cite:MR2572804]]:
 \begin{center}
   ...Antes de que hubiera computadoras, había algoritmos. 
   Pero ahora que hay computadoras, incluso hay más algoritmos y 
   estos se encuentran en el corazón de la informática...
 \end{center}  

   Si bien ya mencionamos que un algoritmo no necesita de una
   computadora para su existencia, en muchos caso, el tener una a la mano
   es de gran ayuda a la hora de implementarlos pues el tiempo en el
   que se obtiene la solución es considerablemente menos.  

** Algoritmos de ordenamiento

*** Cita de Knuth 
   
#+BEGIN_QUOTE
Computer manufacturers estimate that over 25 percent of the running
time on their computers is currently being spent on sorting, when all
their customers are taken into account. There are many installations
in which sorting uses over half of the computing time. From these
statistics we may conclude either that *(i)* there are many important
applications of sorting, or *(ii)* many people sort when they shouldn't,
or *(iii)* inneficient sorting algorithms are in common use. The real
truth probably involves some of the three alternatives.
#+END_QUOTE   

*** Ordenamiento de Burbuja 

**** Tiempo de ejecución
     En \(n(n-1)\)

*** Ordenamiento por torneos

**** Tiempo de ejecucón
     \(n\log n\)

*** TODO Ordenamiento de una lista

    - Primero encontramos el máximo de una lista de \(n\) elementos en
      \(n-1\) pasos y demostramos que es óptimo.
    - Por lo tanto una lista de \(n\) elementos se puede ordenar en
      \(n(n-1)\) pasos.
    - Luego vimos el método de ordenamiento como un torneo de
      eliminación directa y vimos que se puede ordenar en \(n\log n\)
      pasos.

** Algoritmos de camino más corto       
*** Búsqueda en anchura
#+BEGIN_SRC python
def bfs(G, s):
    P, Q = {s: 0}, deque([s]) # Parents and FIFO queue
    while Q:
        u = Q.popleft() # Constant-time for deque
        for v in G.neighbor_out_iterator(u):
            if v in P: continue # Already has parent
            P[v] = P[u]+1 # Reached from u: u is parent
            Q.append(v)
    return P
#+END_SRC

*** Algoritmo de Dijkstra
#+BEGIN_SRC python
def dijkstra(G,s):
    L,T,P = {s:0},[(0,s)],set([])
    while T:
        _, v = heappop(T)
        P.add(v)
        for u in G[v]:
            if u in L:
                if L[u] > L[v]+G[v][u]:
                    L[u] = L[v]+G[v][u]
            else:
                if u not in P:
                    L[u]=L[v]+G[v][u]
                    heappush(T,(L[u],u))
    return L
#+END_SRC

*** Algoritmo de Ford
Este algoritmo algo tenía mal

#+BEGIN_SRC python
def ford(G,s,L=None):
    V=G.keys()
    if L==None:
        L={}
        for i in V:
            L[i]=inf
        L[s]=0
    there_is=False
    i=0
    print L
    while not(there_is) and i<len(V):
        u=V[i]
        j=0
        A=G[u].keys()
        while not(there_is) and j<len(A):
            v = A[j]
            there_is = L[u] < inf and L[v] > L[u]+G[u][v]
            j = j+1
        i = i+1
    if there_is:
        L[v]=L[u]+G[u][v]
        print u,v
        ford(G,s,L)
    else:
        print "Ya"
        print L
        return L
#+END_SRC
*** Algoritmo de Floyd

#+bibliography: ./referencia plain limit:t


* COMMENT Variables locales

# Local Variables:
# eval: (load-file "opciones.el")
# End:
